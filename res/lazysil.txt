sil_stage canonical

import Builtin
import Swift
import SwiftShims

import Foundation

class Animal {
  lazy var age: Int { get set }
  @_hasStorage @_hasInitialValue final var $__lazy_storage_$_age: Int? { get set }
  @objc deinit
  init()
}

@_hasStorage @_hasInitialValue let a: Animal { get }

@_hasStorage @_hasInitialValue let age: Int { get }

// a
sil_global hidden [let] @$s6setSil1aAA6AnimalCvp : $Animal

// age
sil_global hidden [let] @$s6setSil3ageSivp : $Int

// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  alloc_global @$s6setSil1aAA6AnimalCvp           // id: %2
  %3 = global_addr @$s6setSil1aAA6AnimalCvp : $*Animal // users: %10, %7
  %4 = metatype $@thick Animal.Type               // user: %6
  // function_ref Animal.__allocating_init()
  %5 = function_ref @$s6setSil6AnimalCACycfC : $@convention(method) (@thick Animal.Type) -> @owned Animal // user: %6
  %6 = apply %5(%4) : $@convention(method) (@thick Animal.Type) -> @owned Animal // user: %7
  store %6 to %3 : $*Animal                       // id: %7
  alloc_global @$s6setSil3ageSivp                 // id: %8
  %9 = global_addr @$s6setSil3ageSivp : $*Int     // user: %13
  %10 = load %3 : $*Animal                        // users: %11, %12
  %11 = class_method %10 : $Animal, #Animal.age!getter : (Animal) -> () -> Int, $@convention(method) (@guaranteed Animal) -> Int // user: %12
  %12 = apply %11(%10) : $@convention(method) (@guaranteed Animal) -> Int // user: %13
  store %12 to %9 : $*Int                         // id: %13
  %14 = integer_literal $Builtin.Int32, 0         // user: %15
  %15 = struct $Int32 (%14 : $Builtin.Int32)      // user: %16
  return %15 : $Int32                             // id: %16
} // end sil function 'main'

// Animal.age.getter
sil hidden [lazy_getter] [noinline] @$s6setSil6AnimalC3ageSivg : $@convention(method) (@guaranteed Animal) -> Int {
// %0 "self"                                      // users: %14, %2, %1
bb0(%0 : $Animal):
  debug_value %0 : $Animal, let, name "self", argno 1, implicit // id: %1
  %2 = ref_element_addr %0 : $Animal, #Animal.$__lazy_storage_$_age // user: %3
  %3 = begin_access [read] [dynamic] %2 : $*Optional<Int> // users: %4, %5
  %4 = load %3 : $*Optional<Int>                  // user: %6
  end_access %3 : $*Optional<Int>                 // id: %5
  switch_enum %4 : $Optional<Int>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb2 // id: %6

// %7                                             // users: %9, %8
bb1(%7 : $Int):                                   // Preds: bb0
  debug_value %7 : $Int, let, name "tmp1", implicit // id: %8
  br bb3(%7 : $Int)                               // id: %9

bb2:                                              // Preds: bb0
  %10 = integer_literal $Builtin.Int64, 18        // user: %11
  %11 = struct $Int (%10 : $Builtin.Int64)        // users: %18, %13, %12
  debug_value %11 : $Int, let, name "tmp2", implicit // id: %12
  %13 = enum $Optional<Int>, #Optional.some!enumelt, %11 : $Int // user: %16
  %14 = ref_element_addr %0 : $Animal, #Animal.$__lazy_storage_$_age // user: %15
  %15 = begin_access [modify] [dynamic] %14 : $*Optional<Int> // users: %16, %17
  store %13 to %15 : $*Optional<Int>              // id: %16
  end_access %15 : $*Optional<Int>                // id: %17
  br bb3(%11 : $Int)                              // id: %18

// %19                                            // user: %20
bb3(%19 : $Int):                                  // Preds: bb2 bb1
  return %19 : $Int                               // id: %20
} // end sil function '$s6setSil6AnimalC3ageSivg'

// Int.init(_builtinIntegerLiteral:)
sil public_external [transparent] @$sSi22_builtinIntegerLiteralSiBI_tcfC : $@convention(method) (Builtin.IntLiteral, @thin Int.Type) -> Int {
// %0                                             // user: %2
bb0(%0 : $Builtin.IntLiteral, %1 : $@thin Int.Type):
  %2 = builtin "s_to_s_checked_trunc_IntLiteral_Int64"(%0 : $Builtin.IntLiteral) : $(Builtin.Int64, Builtin.Int1) // user: %3
  %3 = tuple_extract %2 : $(Builtin.Int64, Builtin.Int1), 0 // user: %4
  %4 = struct $Int (%3 : $Builtin.Int64)          // user: %5
  return %4 : $Int                                // id: %5
} // end sil function '$sSi22_builtinIntegerLiteralSiBI_tcfC'

// Animal.age.setter
sil hidden @$s6setSil6AnimalC3ageSivs : $@convention(method) (Int, @guaranteed Animal) -> () {
// %0 "value"                                     // users: %4, %2
// %1 "self"                                      // users: %5, %3
bb0(%0 : $Int, %1 : $Animal):
  debug_value %0 : $Int, let, name "value", argno 1, implicit // id: %2
  debug_value %1 : $Animal, let, name "self", argno 2, implicit // id: %3
  %4 = enum $Optional<Int>, #Optional.some!enumelt, %0 : $Int // user: %7
  %5 = ref_element_addr %1 : $Animal, #Animal.$__lazy_storage_$_age // user: %6
  %6 = begin_access [modify] [dynamic] %5 : $*Optional<Int> // users: %7, %8
  store %4 to %6 : $*Optional<Int>                // id: %7
  end_access %6 : $*Optional<Int>                 // id: %8
  %9 = tuple ()                                   // user: %10
  return %9 : $()                                 // id: %10
} // end sil function '$s6setSil6AnimalC3ageSivs'

// Animal.age.modify
sil hidden [transparent] @$s6setSil6AnimalC3ageSivM : $@yield_once @convention(method) (@guaranteed Animal) -> @yields @inout Int {
// %0 "self"                                      // users: %9, %15, %4, %1
bb0(%0 : $Animal):
  debug_value %0 : $Animal, let, name "self", argno 1, implicit // id: %1
  %2 = alloc_stack $Int                           // users: %13, %7, %5, %10, %16, %6
  // function_ref Animal.age.getter
  %3 = function_ref @$s6setSil6AnimalC3ageSivg : $@convention(method) (@guaranteed Animal) -> Int // user: %4
  %4 = apply %3(%0) : $@convention(method) (@guaranteed Animal) -> Int // user: %5
  store %4 to %2 : $*Int                          // id: %5
  yield %2 : $*Int, resume bb1, unwind bb2        // id: %6

bb1:                                              // Preds: bb0
  %7 = load %2 : $*Int                            // user: %9
  // function_ref Animal.age.setter
  %8 = function_ref @$s6setSil6AnimalC3ageSivs : $@convention(method) (Int, @guaranteed Animal) -> () // user: %9
  %9 = apply %8(%7, %0) : $@convention(method) (Int, @guaranteed Animal) -> ()
  dealloc_stack %2 : $*Int                        // id: %10
  %11 = tuple ()                                  // user: %12
  return %11 : $()                                // id: %12

bb2:                                              // Preds: bb0
  %13 = load %2 : $*Int                           // user: %15
  // function_ref Animal.age.setter
  %14 = function_ref @$s6setSil6AnimalC3ageSivs : $@convention(method) (Int, @guaranteed Animal) -> () // user: %15
  %15 = apply %14(%13, %0) : $@convention(method) (Int, @guaranteed Animal) -> ()
  dealloc_stack %2 : $*Int                        // id: %16
  unwind                                          // id: %17
} // end sil function '$s6setSil6AnimalC3ageSivM'

// variable initialization expression of Animal.$__lazy_storage_$_age
sil hidden [transparent] @$s6setSil6AnimalC21$__lazy_storage_$_age33_4819FA22CA2D1D51637BDBC63D4493F9LLSiSgvpfi : $@convention(thin) () -> Optional<Int> {
bb0:
  %0 = enum $Optional<Int>, #Optional.none!enumelt // user: %1
  return %0 : $Optional<Int>                      // id: %1
} // end sil function '$s6setSil6AnimalC21$__lazy_storage_$_age33_4819FA22CA2D1D51637BDBC63D4493F9LLSiSgvpfi'

// Animal.deinit
sil hidden @$s6setSil6AnimalCfd : $@convention(method) (@guaranteed Animal) -> @owned Builtin.NativeObject {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $Animal):
  debug_value %0 : $Animal, let, name "self", argno 1, implicit // id: %1
  %2 = unchecked_ref_cast %0 : $Animal to $Builtin.NativeObject // user: %3
  return %2 : $Builtin.NativeObject               // id: %3
} // end sil function '$s6setSil6AnimalCfd'

// Animal.__deallocating_deinit
sil hidden @$s6setSil6AnimalCfD : $@convention(method) (@owned Animal) -> () {
// %0 "self"                                      // users: %3, %1
bb0(%0 : $Animal):
  debug_value %0 : $Animal, let, name "self", argno 1, implicit // id: %1
  // function_ref Animal.deinit
  %2 = function_ref @$s6setSil6AnimalCfd : $@convention(method) (@guaranteed Animal) -> @owned Builtin.NativeObject // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed Animal) -> @owned Builtin.NativeObject // user: %4
  %4 = unchecked_ref_cast %3 : $Builtin.NativeObject to $Animal // user: %5
  dealloc_ref %4 : $Animal                        // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function '$s6setSil6AnimalCfD'

// Animal.__allocating_init()
sil hidden [exact_self_class] @$s6setSil6AnimalCACycfC : $@convention(method) (@thick Animal.Type) -> @owned Animal {
// %0 "$metatype"
bb0(%0 : $@thick Animal.Type):
  %1 = alloc_ref $Animal                          // user: %3
  // function_ref Animal.init()
  %2 = function_ref @$s6setSil6AnimalCACycfc : $@convention(method) (@owned Animal) -> @owned Animal // user: %3
  %3 = apply %2(%1) : $@convention(method) (@owned Animal) -> @owned Animal // user: %4
  return %3 : $Animal                             // id: %4
} // end sil function '$s6setSil6AnimalCACycfC'

// Animal.init()
sil hidden @$s6setSil6AnimalCACycfc : $@convention(method) (@owned Animal) -> @owned Animal {
// %0 "self"                                      // users: %2, %5, %1
bb0(%0 : $Animal):
  debug_value %0 : $Animal, let, name "self", argno 1, implicit // id: %1
  %2 = ref_element_addr %0 : $Animal, #Animal.$__lazy_storage_$_age // user: %4
  %3 = enum $Optional<Int>, #Optional.none!enumelt // user: %4
  store %3 to %2 : $*Optional<Int>                // id: %4
  return %0 : $Animal                             // id: %5
} // end sil function '$s6setSil6AnimalCACycfc'

sil_vtable Animal {
  #Animal.age!getter: (Animal) -> () -> Int : @$s6setSil6AnimalC3ageSivg	// Animal.age.getter
  #Animal.age!setter: (Animal) -> (Int) -> () : @$s6setSil6AnimalC3ageSivs	// Animal.age.setter
  #Animal.age!modify: (Animal) -> () -> () : @$s6setSil6AnimalC3ageSivM	// Animal.age.modify
  #Animal.init!allocator: (Animal.Type) -> () -> Animal : @$s6setSil6AnimalCACycfC	// Animal.__allocating_init()
  #Animal.deinit!deallocator: @$s6setSil6AnimalCfD	// Animal.__deallocating_deinit
}



// Mappings from '#fileID' to '#filePath':
//   'setSil/setSil.swift' => 'setSil.swift'


